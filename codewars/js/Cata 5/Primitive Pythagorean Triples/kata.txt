Pythagoras(569-500 B.C.E.) discovered the relation a? + b? = c? for rectangle triangles,a, b and c are the side values of these special triangles. A rectangle triangle has an angle of 90°. In the following animated image you can see a rectangle triangle with the side values of (a, b, c) = (3, 4, 5) The pink square has an area equals to 9 (a? = 3?), the green square an area equals to 16 (b? = 4?) and the square with pink and green an area of 25 (c? = 5?) Adding the pink area to the green one, we obtain 9 + 16 = 25

source: imgur.com

A Pythagorean Triple (a, b, c) is such that a ? b < c, the three are integers, and a? + b? = c?.

A Primitive Pythagorean Triple has another additional property: a, b and c are co-primes. Two numbers are co-primes when the Greatest Common Divisor of every pair of the triple is 1. So G.C.D.(a, b) = 1, G.C.D.(b, c) = 1 and G.C.D.(a, c) = 1

Just to visualize the primitives triples, we may see them, each one represented like a rectangle triangle displayed in a 2D arrengement done by Adam Cunningham and John Ringland (March 2012):

source: imgur.com

The perimeter for a pythagorean triple is: per = a + b + c

The first 16 primitive pythagorean triples with their corresponding perimeter beside, having c below or equal 100 (c ? 100) are:

 (3, 4, 5),   12        (5, 12, 13),  30          (8, 15, 17),  40        (7, 24, 25),  56
(20, 21, 29), 70        (12, 35, 37), 84          (9, 40, 41),  90        (28, 45, 53), 126
(11, 60, 61), 132       (16, 63, 65), 144         (33, 56, 65), 154       (48, 55, 73), 176
(13, 84, 85), 182       (36, 77, 85), 198         (39, 80, 89), 208       (65, 72, 97), 234
The primitive triple that has the maximum perimeter, with c ? 100 is (65, 72, 97) with a perimeter equals to 234

Your task is to make a function find _max_triple(), that receives an argument c_max, and will return the triple with the maximum perimeter having the side c below or equal c_max.

find _max_triple() will output a list of dictionaries as follows:

[{"number triplets below-eq c_max": amount_triplets}, {"max perimeter": max_per}, {"largest triplet": (am, bm, cm)}]

Let's see some cases:


find_max_triple(50) == [{'number triples below-eq 50': 7}, {'max perimeter': 90}, {'largest triplet': [(9, 40, 41)]}]

find_max_triple(100) == [{'number triples below-eq 100': 16}, {'max perimeter': 234}, {'largest triplet': [(65, 72, 97)]}]

find_max_triple(150) = [{'number triples below-eq 150': 24}, {'max perimeter': 340}, {'largest triplet': [(51, 140, 149)]}]
For the Javascript version the output should be different, instead of an array of dictionaries or objects, it should a 2D array, see examples bellow

findMaxTriple(50) ==[['number triples below-eq 50',7],['max perimeter', 90], ['largest triple', [[9, 40, 41]]]];

findMaxTriple(100) == [['number triples below-eq 100', 16], ['max perimeter', 234], ['largest triple', [[65, 72, 97]]]];

findMaxTriple(150) == [['number triples below-eq 150', 24], ['max perimeter', 340], ['largest triple', [[51, 140, 149]]]];
Hint, see at: https://en.wikipedia.org/wiki/Formulas_for_generating_Pythagorean_triples

Your code will be tested for values of c_max up to 10000.

(Memoizations is advisable)